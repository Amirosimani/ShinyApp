View(data)
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shinyapps::setAccountInfo(name='amirhs', token='EF101805397D89F6C8BE7D87CDACD580', secret='9P5RL4pRr93ch/s7dqsKcwwQfVs6LSWR95umRs5o')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
data <- read.csv("~/MyGit/8aa/TFIDF.csv", header = TRUE)
shiny::runApp('MyGit/8aa/run1')
x <- colnames(data)
x
x <- colnames(data)[2:4]
x
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
runGitHub( "<ShinyApps>", "<Amirosimani>")
git config --global user.email "amirhs.imani@gmail.com"
shiny::runApp('MyGit/8aa/run1')
git remote add origin git@github.com:Amirosimani/ShinyApp.git
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
c_min <- min(data[,input$selection])
c_max <- max(data[,input$selection])
updateSliderInput(session, "range",
min = c_min, max = c_max)
git remote add origin git@github.com:Amirosimani/ShinyApp.git
c_min <- min(data[,input$selection])
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
hist( data[,input$selection], breaks = bins, col = 'darkgray', border = 'white')
c_min <- min(data[,input$selection])
hist( data[,input$selection],  col = 'darkgray', border = 'white')
hist( data[,2],  col = 'darkgray', border = 'white')
hist( data[,3],  col = 'darkgray', border = 'white')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2]))/100 , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = (max(data[,3])-min(data[,3]))/100 , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = 1/(max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = 1 / (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = c(1 / (max(data[,3])-min(data[,3]))) , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white')
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white')
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white')
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white', main = "Words' Histogram")
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white', main = "Words Histogram")
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300))
hist( data[,3],  breaks = (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300))
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300))
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300), xlab=colnames(data)[2])
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300), xlab=colnames(data)[2], ylab = "word numbers")
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300), xlab=colnames(data)[3], ylab = "word numbers")
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300), xlab=colnames(data)[2], ylab = "word numbers")
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,150), xlab=colnames(data)[2], ylab = "word numbers")
shiny::runApp('MyGit/8aa/run1')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Histogram", xlim=c(0,150), xlab=colnames(data)[2], ylab = "word numbers")
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
label <- data[,input$selection]
label <- colnames(data[,input$selection])
label <- colnames(data)[,input$selection]
shiny::runApp('MyGit/8aa/run1')
curve(dnorm(x, mean=mean(data[,2]), sd=sd(data[,2])), add=TRUE, col=”darkblue”, lwd=2)
curve(dnorm(x, mean=mean(data[,2]), sd=sd(data[,2])), add=TRUE, col=”darkblue”, lwd=2
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Histogram", xlim=c(0,150), xlab=colnames(data)[2], ylab = "word numbers")
curve(dnorm(x, mean=mean(data[,2]), sd=sd(data[,2])), add=TRUE, col=”darkblue”, lwd=2)
x <- data[,2]
curve(dnorm(x, mean=mean(x), sd=sd(x)), add=TRUE, col=”darkblue”, lwd=2)
mean(x)
sd(x)
curve(dnorm(x, mean=mean(x), sd=sd(x)), add=TRUE, col="darkblue", lwd=2)
curve(dnorm(x, mean=mean(data[,2]), sd=sd(data[,2])), add=TRUE, col="darkblue", lwd=2)
curve(dnorm(x, mean=mean(data[,3]), sd=sd(data[,3])), add=TRUE, col="darkblue", lwd=2)
hist( data[,3],  breaks = (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300))
curve(dnorm(x, mean=mean(data[,3]), sd=sd(data[,3])), add=TRUE, col="darkblue", lwd=2)
lines(density(X))
lines(density(data[,3]))
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
renderTable
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
## example 10.2.1
##sign test
##install package PASWR
install.package("PASWR")
library(PASWR)
data1=c(55, 58, 61, 61, 62, 62, 62, 63, 63, 64, 66, 68, 68, 69, 69, 69, 70, 71, 72, 72)
SIGN.test(data1,md=59, y = NULL, alternative = "two.sided", conf.level = 0.95)
## example 10.3.1
## sign rank test
## two sample
library(MASS)
install.packages("PASWR")
library(PASWR)
data1=c(55, 58, 61, 61, 62, 62, 62, 63, 63, 64, 66, 68, 68, 69, 69, 69, 70, 71, 72, 72)
SIGN.test(data1,md=59, y = NULL, alternative = "two.sided", conf.level = 0.95)
## example 10.3.1
## sign rank test
## two sample
library(MASS)
y1=rnorm(100,1,1)
y2=rnorm(100,0,1)
wilcox.test(y1, y2)
# Chapter 3 Lab: Linear Regression
library(MASS)
library(ISLR)
# Simple Linear Regression
names(Boston)
lm.fit=lm(medv~lstat,data=Boston)
attach(Boston)
##fit a simple linear regression
lm.fit=lm(medv~lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
## extracting coefficients
coef(lm.fit)
##confidence intervals for the coefficients
confint(lm.fit)
## predictions along with conf and predictive intervals for new data
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
## plotting our regression fit
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,col="red")
plot(lstat,medv,pch=20)
plot(lstat,medv,pch="+")
plot(1:20,1:20,pch=1:20)
## 4 plots on 1 page
par(mfrow=c(2,2))
## diagnostic plots
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# Multiple Linear Regression
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
## diagnostic plots
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
## diagnostic plots
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
par(mfrow=c(2,2))
## diagnostic plots
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# Multiple Linear Regression
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# Multiple Linear Regression
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
## regress on all variables in the data set
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
library(car)
## compute the variance inflation factor as a measure of multicollinearity
vif(lm.fit)
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=update(lm.fit, ~.-age)
# Interaction Terms
summary(lm(medv~lstat*age,data=Boston))
# Non-linear Transformations of the Predictors
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
## regress on all variables in the data set
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
library(car)
## compute the variance inflation factor as a measure of multicollinearity
library(car)
install.packages("car")
libray(car)
library(car)
library(car)
## compute the variance inflation factor as a measure of multicollinearity
vif(lm.fit)
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=update(lm.fit, ~.-age)
# Interaction Terms
summary(lm(medv~lstat*age,data=Boston))
# Non-linear Transformations of the Predictors
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
## comparing the polynomial to the linear fit
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
## fitting a fifth degree ploynomial model
lm.fit5=lm(medv~poly(lstat,5))
summary(lm.fit5)
summary(lm(medv~log(rm),data=Boston))
# Qualitative Predictors
fix(Carseats)
names(Carseats)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
sudo apt-get install git-core
library(dplyr)
library(dplyr)
library(RSQLite)
install.packages("DBI")
getwd()
library(RSQLite)
install.packages("RSQLite")
View(female)
View(lawf)
View(lawf)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
library(stats)
library(dplyr)
library(RSQLite)
library(lubridate)
library(ggplot2)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#parsing date
for (i in 1:nrow(docs)) {
arrive <- ymd_hms(docs$date, tz = "Pacific/Auckland")
time <- hour(arrive)
time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(docs$date, "%Y-%m-%d %H:%M:%S")))
date[complete.cases(date)]
date <-date[complete.cases(date)]
stripped_date = data.frame(date, time)
}
#Clean up connection to the database
dbDisconnect(connection)
library(dplyr)
library(RSQLite)
shiny::runApp('MyGit/8aa/run1')
library(RColorBrewer)
library(wordcloud)
library(ggplot2)
library(taRifx)
data <- read.csv("./Data/TFIDF.csv", header = TRUE)
function(input, output, clientData, session) {
observe({
updateSliderInput(session, "slider",
min = min(data[,input$selection]), max = max(data[,input$selection]))
})
# Make the wordcloud drawing predictable during a session
wordcloud_rep <- repeatable(wordcloud)
output$plot <- renderPlot({
wordcloud_rep(data$Text, data[,input$selection], scale=c(3,0.1),
min.freq = input$slider, max.words= max(data[,input$selection]),
random.order=F,
colors=brewer.pal(8, "Dark2")
)
})
output$table <- renderDataTable({
plotdata <- data.frame(data[,1],data[,input$selection])
})
output$histogram <- renderPlot({
hist( data[,input$selection],  breaks = (max(data[,input$selection])-min(data[,input$selection])) , col = 'darkgray', border = 'white', main = "Histogram", xlim=c(0,150), ylab = "word numbers")
})
output$downloadData <- downloadHandler ( filename = function() {paste(data, '.csv' , sep='')},
content = function(file){
write.csv(data(), file)
}
)
}
shiny::runApp('MyGit/8aa/run1')
data <- read.csv("./Data/TFIDF.csv", header = TRUE)
setwd("~/MyGit/8aa/run1")
data <- read.csv("./Data/TFIDF.csv", header = TRUE)
shiny::runApp()
shiny::runApp()
View(data)
library(RColorBrewer)
library(wordcloud)
library(ggplot2)
library(taRifx)
data <- read.csv("./Data/TFIDF.csv", header = TRUE)
function(input, output, clientData, session) {
observe({
updateSliderInput(session, "slider",
min = min(data[,input$selection]), max = max(data[,input$selection]))
})
# Make the wordcloud drawing predictable during a session
wordcloud_rep <- repeatable(wordcloud)
output$plot <- renderPlot({
wordcloud_rep(data$Text, data[,input$selection], scale=c(3,0.1),
min.freq = input$slider, max.words= max(data[,input$selection]),
random.order=F,
colors=brewer.pal(8, "Dark2")
)
})
output$table <- renderDataTable({
plotdata <- data.frame(data[,1],data[,input$selection])
})
output$histogram <- renderPlot({
hist( data[,input$selection],  breaks = (max(data[,input$selection])-min(data[,input$selection])) , col = 'darkgray', border = 'white', main = "Histogram", xlim=c(0,150), ylab = "word numbers")
})
output$downloadData <- downloadHandler ( filename = function() {paste(data, '.csv' , sep='')},
content = function(file){
write.csv(data(), file)
}
)
}
fluidPage(
# Application title
titlePanel("Code of Ethics and Conduct"),
# sidebar description
br(),
fluidRow(
column(11,
h4("Analysis of existing codes of conduct and codes of ethics relevant to the practice of chemistry."),
p("As part of the Workshop on Ethical Guidelines for the Practice of Chemistry under the Norms of the Chemical Weapons Convention, 142 codes were collected and analysed. Here you can interact with our findings and results.")
)
),
sidebarPanel(
selectInput("selection", "Choose a Variable:",
choices = colnames(data)[2:4]),
actionButton("update", "Change"),
hr(),
sliderInput("slider", "Frequency Range:",
min = 10, max = 2000, value = 100, step= 10, animate=F
),
downloadButton('downloadData', 'Download')
),
# helpText("what is TFID?")
# Show Word Cloud
mainPanel(
tabsetPanel(
tabPanel("Frequency Table", dataTableOutput(outputId= "table")),
tabPanel("Histogram", plotOutput("histogram")),
tabPanel("Word Cloud", plotOutput("plot"))
)
)
